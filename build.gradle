import java.nio.charset.StandardCharsets

buildscript {
    ext {
        versions = [
                lombok : "1.18.20",
                junit5 : "5.7.2",
                assertj: "3.19.0",
        ]
    }

    repositories {
        google()
        mavenLocal()
        mavenCentral()

        flatDir {
            dirs("$rootDir/lib")
        }
    }
}

plugins {
    id("java")
}

group = "io.github.imsejin"
version = versions.lombok

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

apply(plugin: "java")
apply(plugin: "maven-publish")
apply(plugin: "idea")

// Prevents error from occurring "unmappable character for encoding MS949".
[compileJava, compileTestJava]*.options*.encoding = StandardCharsets.UTF_8

repositories {
    google()
    mavenLocal()
    mavenCentral()

    flatDir {
        dirs("$rootDir/lib")
    }
}

configurations {
    lombok
}

idea {
    module {
        outputDir(file("$buildDir/classes/main"))
        testOutputDir(file("$buildDir/classes/test"))
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
        }
    }
}

clean {
    // Initializes file list to be deleted.
    delete = []

    // Removes all build files except for "build/libs/lombok-plus-{version}.jar".
    if (file(buildDir).exists()) {
        files(buildDir.listFiles()).filter { it.name != "libs" }.forEach { delete it }

        if (file("$buildDir/libs").exists()) {
            def buildFilename = "${rootProject.name}-${version}.jar"
            files(file("$buildDir/libs").listFiles()).filter { it.name != buildFilename }.forEach { delete it }
        }
    }
}

/**
 * Unpack lombok library packed by ShadowClassLoader and
 * Rename to the standard jvm byte code.
 */
def unpackedLombokDir = file("$buildDir/lombok")
task unpackLombok {
    inputs.files(configurations.lombok)
    outputs.dir(unpackedLombokDir)
    doFirst {
        mkdir(unpackedLombokDir)
        delete(unpackedLombokDir.listFiles())
    }
    doLast {
        copy {
            from(zipTree(configurations.lombok.singleFile))
            into(unpackedLombokDir)
            include("lombok/**/*")
            rename("(.+)\\.SCL\\.lombok", '$1.class')
        }
    }
}

tasks.compileJava {
    dependsOn(unpackLombok)
}

dependencies {
    // "com.sun:tools:1.8"
    if (JavaVersion.VERSION_1_8.isCompatibleWith(JavaVersion.current())) {
        // When your java version is less than or equal to "1.8".
        compileOnly(files("${System.properties['java.home']}/../lib/tools.jar"))
    } else {
        // When your java version is greater than "1.8",
        // "tools.jar" is removed since "1.9".
        compileOnly(fileTree(dir: "$rootDir/lib", include: ["**/*.jar"]))
    }
    // compileOnly(group: "com.github.olivergondza", name: "maven-jdk-tools-wrapper", version: "0.1")

    /**
     * Automatically registers services to be handled by annotation processor.
     * This generates files like the following names.
     *
     *     META-INF/services/lombok.core.configuration.ConfigurationKeysLoader
     *     META-INF/services/lombok.javac.JavacAnnotationHandler
     */
    compileOnly(group: "org.kohsuke.metainf-services", name: "metainf-services", version: "1.8")
    annotationProcessor(group: "org.kohsuke.metainf-services", name: "metainf-services", version: "1.8")

    compileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.core", version: "3.25.0")
    compileOnly(group: "javax.inject", name: "javax.inject", version: "1")

    /**
     * To avoid disclosing internal APIs, Lombok changes file extension
     * from "class" to "SCL.lombok" since 1.16.0 using ShadowClassLoader.
     *
     * This works for accessing to enclosed internal APIs.
     * These classes are in the following path.
     *
     *     build/lombok/
     *
     * If you don't use "configurations.lombok", you will see this error message.
     *
     *     Expected configuration ':lombok' to contain exactly one file,
     *     however, it contains no files.
     */
    lombok(group: "org.projectlombok", name: "lombok", version: "$versions.lombok")
    compileOnly(files(unpackedLombokDir))
    testCompileOnly(files(unpackedLombokDir))
    testAnnotationProcessor(group: "org.projectlombok", name: "lombok", version: "$versions.lombok")

    /**
     * To test lombok-plus annotations, refer to itself.
     */
    testCompileOnly(rootProject)
    testAnnotationProcessor(rootProject)

    testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-api", version: "$versions.junit5")
    testRuntimeOnly(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "$versions.junit5")
    testImplementation(group: "org.assertj", name: "assertj-core", version: "$versions.assertj")
    testCompileOnly(group: "com.google.testing.compile", name: "compile-testing", version: "0.19")
    testCompileOnly(group: "commons-io", name: "commons-io", version: "2.6")
    testCompileOnly(group: "org.ow2.asm", name: "asm", version: "7.1")
    testCompileOnly(group: "org.ow2.asm", name: "asm-util", version: "7.1")
    testCompileOnly(group: "org.apache.logging.log4j", name: "log4j-slf4j-impl", version: "2.12.1")
}

test {
    useJUnitPlatform()
    systemProperty("gradleBuildDir", buildDir)
}
